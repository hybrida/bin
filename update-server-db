#! /usr/bin/env python2

import hashlib
import os, os.path
import sys

class DatabaseUpdate:

	def __init__(self, db_dir):
		self.db_dir = db_dir
		self.struc_path = os.path.join(db_dir, "structure.sql")
		self.data_path = os.path.join(db_dir, "data.sql")

		self.struc_hash = self.struc_path + ".hash"
		self.data_hash = self.data_path + ".hash"
		self.mysql_start = "mysql -uwww-data-update -p6yPxQZfceThVTRqS "
		self.create_hash_files()

	def create_hash_files(self):
		isfile = os.path.isfile
		for file_path in [self.struc_hash, self.data_hash]:
			if not isfile(file_path):
				with open(file_path, "w"): pass

	def hash(self, file_path):
		lines = []
		with open(file_path, "r") as file:
			for line in file:
				lines.append(line)
		joined = "".join(lines)
		hash = self.sha(joined)
		return hash.hexdigest()

	def sha(self, s):
		try:
			return hashlib.sha224(s)
		except:
			try:
				enc = s.encode("utf-8")
				return hashlib.sha224(enc)
			except:
				raise RuntimeError("Klarte ikke hashe")

	def update_if_new(self):
		struc_old = self.read(self.struc_hash)
		data_old = self.read(self.data_hash)

		self.calculate_hashes()

		data_eq = data_old == self.data_new
		struc_eq = struc_old == self.struc_new
		should_update = not data_eq or not struc_eq

		if should_update:
			self.update_force()
		else:
			print("Ingen database-oppdateringer")

	def calculate_hashes(self):
		self.struc_new = self.hash(self.struc_path)
		self.data_new = self.hash(self.data_path)

	def read(self, file_path):
		with open(file_path, "r") as file:
			lines = file.readlines()
			return "".join(lines)

	def update_force(self):
		self.calculate_hashes()
		print("Starter database-oppdatering")
		self.do_update()
		print("Ferdig med database-oppdateringer\n")
		print("Skriver nye hash-verdier")
		self.write(self.struc_hash, self.struc_new)
		self.write(self.data_hash, self.data_new)

	def write(self, file_path, string):
		with open(file_path, "w") as file:
			file.write(string)

	def do_update(self):
		print("Sletter databasen")
		self.mysql_query('DROP DATABASE hybrida_dev;')
		print("Legger inn structure.sql")
		self.mysql_import(self.struc_path)
		print("Legger inn data.sql")
		self.mysql_import(self.data_path)

	def mysql_query(self, sql):
		cmd = self.mysql_start + "-e " + "'" + sql + "'"
		self.system(cmd)


	def mysql_import(self, file):
		cmd = self.mysql_start + " < " + file
		self.system(cmd)

	def system(self, cmd):
		os.system(cmd)

class OptionParser:

	def __init__(self):
		self.long = []
		self.short = []
		self.args = []

	def parse_args(self):

		for arg in sys.argv[1:]:
			if arg.startswith("--"):
				self.long.append(arg.replace("--", ""))
			elif arg.startswith("-"):
				self.short.append(arg.replace("-", ""))
			else:
				self.args.append(arg)

	def has(self, long=None, short=None):
		if long in self.long or short in self.short:
			return True


def run():
	parser = OptionParser()
	parser.parse_args()
	if parser.has(long="help", short="h"):
		print_help()
		return
	if len(parser.args) < 1:
		print("du glemte aa putte inn database-mappe\n")
		print_help()
		return
	du = DatabaseUpdate(parser.args[0])
	if parser.has(long="force", short="f"):
		du.update_force()
	else:
		du.update_if_new()


def print_help():
	help = """usage: update-server-db [-h] [-f] database_directory

	positional arguments:
	  database_directory  f.eks /var/www/hybrida-prod/db

	optional arguments:
	  -h, --help          show this help message and exit
	  -f, --force         tving ny oppdatering
	"""
	print(help)

if __name__ == "__main__":
	run()
