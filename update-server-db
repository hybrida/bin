#! /usr/bin/env python

import hashlib
import os, os.path
import argparse

class DatabaseUpdate:

	def __init__(self, db_dir="/var/www/yii/db/"):
		self.db_dir = db_dir
		self.struc_path = os.path.join(db_dir, "structure.sql")
		self.data_path = os.path.join(db_dir, "data.sql")

		self.struc_hash = self.struc_path + ".hash"
		self.data_hash = self.data_path + ".hash"
		self.mysql_start = "mysql -uwww-data-update -pQzjS7r3CXWHxQwT4q "
		self.create_hash_files()

	def create_hash_files(self):
		isfile = os.path.isfile
		for file_path in [self.struc_hash, self.data_hash]:
			if not isfile(file_path):
				with open(file_path, "w"): pass



	def md5(self, file_path):
		lines = []
		with open(file_path, "r") as file:
			for line in file:
				lines.append(line)
		joined = "".join(lines).encode("utf-8")
		hash = hashlib.sha224(joined)
		return hash.hexdigest()

	def update_if_new(self):
		struc_old = self.read(self.struc_hash)
		data_old = self.read(self.data_hash)

		self.calculate_hashes()

		data_eq = data_old == self.data_new
		struc_eq = struc_old == self.struc_new
		should_update = not data_eq or not struc_eq

		if should_update:
			self.update_force()
		else:
			print("Ingen database-oppdateringer")

	def calculate_hashes(self):
		self.struc_new = self.md5(self.struc_path)
		self.data_new = self.md5(self.data_path)

	def read(self, file_path):
		with open(file_path, "r") as file:
			lines = file.readlines()
			return "".join(lines)

	def update_force(self):
		self.calculate_hashes()
		print("Starter database-oppdatering")
		self.do_update()
		print("Ferdig med database-oppdateringer\n")
		print("Skriver nye hash-verdier")
		self.write(self.struc_hash, self.struc_new)
		self.write(self.data_hash, self.data_new)

	def write(self, file_path, string):
		with open(file_path, "w") as file:
			file.write(string)

	def do_update(self):
		print("Sletter databasen")
		self.mysql_query('DROP DATABASE hybrida_dev;')
		print("Legger inn structure.sql")
		self.mysql_import(self.struc_path)
		print("Legger inn data.sql")
		self.mysql_import(self.data_path)

	def mysql_query(self, sql):
		cmd = self.mysql_start + "-e " + "'" + sql + "'"
		self.system(cmd)


	def mysql_import(self, file):
		cmd = self.mysql_start + " < " + file
		self.system(cmd)

	def system(self, cmd):
		os.system(cmd)


# >>> import hashlib
# >>> m = hashlib.md5()
# >>> m.update("Nobody inspects")
# >>> m.update(" the spammish repetition")
# >>> m.digest()
# '\xbbd\x9c\x83\xdd\x1e\xa5\xc9\xd9\xde\xc9\xa1\x8d\xf0\xff\xe9'
# >>> m.digest_size
# 16
# >>> m.block_size
# 64

def test():
	"""
	>>> d = DatabaseUpdate()
	>>> hash = d.md5(d.data_path)
	>>> print(len(hash) > 10)
	True
	"""

def run():
	args = argparse.ArgumentParser()
	args.add_argument("-f", "--force",
					  help="tving ny oppdatering",
					  action="store_const",
					  const=True, default=False)
	args.add_argument("database_directory", help="f.eks /var/www/hybrida-prod/db")
	args = args.parse_args()
	du = DatabaseUpdate(args.database_directory)
	if not args.force:
		du.update_if_new()
	else:
		du.update_force()


if __name__ == "__main__":
	import doctest
	doctest.testmod()
	run()
